# strhash.py -m 31 -s VirtualAlloc -s EnumSystemFirmwareTables

import argparse, pefile, fnmatch, os, sys

def strhash(mul: int, string: str, hashlimit=0xffffffff):
  k = 0
  for ch in string:
    k = (mul*k + ord(ch)) & hashlimit
  return k


def strhash_main(argv):
  parser = argparse.ArgumentParser(os.path.basename(__file__))
  parser.add_argument('-t', '--self_test', action='store_true')
  parser.add_argument('-m', '--multiplier', required=True)
  parser.add_argument('-s', '--string', nargs='*', action='append', required=True)
  parser.add_argument('-f', '--file', nargs='*', action='append', required=False)
  parser.add_argument('-o', '--out_header_file', required=True)
  args = parser.parse_args(argv)
  if args.self_test:
    assert(not args.string and not args.file and not args.multiplier)
    print('doing self test')
    st = StrhashSelftest(37)
    #StrhashSelftest(37)._process_file('C:\\windows\\system32\\kernel32.dll'); exit()
    exit(st.do_test(sys.argv[2]))

  mul = int(args.multiplier, 0) # this? or forgot...0x????????????????????????

  with open(args.out_header_file, 'w') as f:

    f.write(f'// autogenerated with {" ".join(sys.argv)} ;\n')

    f.write(f'#define STRHASH_MULTIPLIER {mul}\n')
    if args.string:
      f.write(f'// adding -s strings ...\n')
      for string in sum(args.string, []):
        hsh = strhash(mul, string)
        f.write(f'#define {string}_HASH 0x{hsh:08X}\n')

    if args.file:
      f.write(f'// adding strings from -f files ...\n')
      for file in sum(args.file, []):
        f.write(f'// adding string from file {fl}\n')
        lines = open(fl, 'r').readlines()
        for line in lines:
          string = line.rstrip()
          hash = strhash(mul, string)
          f.write(f'#define {string}_HASH 0x{hash:08X}\n')
    else:
      f.write(f'// no -f files specified\n')



if __name__=='__main__':
  strhash_main(sys.argv[1:])


