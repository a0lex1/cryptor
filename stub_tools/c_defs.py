import os, sys, argparse

if __name__ == '__main__':
  parser = argparse.ArgumentParser(os.path.basename(__file__))
  parser.add_argument('-D', '--define', nargs='+', action='append')
  parser.add_argument('-C', '--commented', nargs='+', action='append')
  parser.add_argument('-o', '--out_header_file', required=True)
  args = parser.parse_args()

  def print_definitions(f, lst, def_prefix):
    for ll in lst:
      l = ll[0]
      lr = l.split('=')
      assert(len(lr) == 0 or 1 or 2)
      if not len(lr):
      # allow empty '=' at the end (empty value)
        continue
      if len(lr) == 1:
        k, v = lr[0], ''
      else:
        k, v = lr[0], lr[1]
      assert(len(k) != 0 and k[0].isalpha() or k[0] == '_')
      f.write(f'{def_prefix}#define {k} {v}\n')


  with open(args.out_header_file, 'w') as f:
    f.write('#pragma once\n')
    f.write(f'\n/* generated by {" ".join(sys.argv)} */\n\n')
    if args.define:
      print_definitions(f, args.define, '')
    if args.commented:
      print_definitions(f, args.commented, '//')
