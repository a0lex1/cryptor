import os, sys
from collections import OrderedDict

from c2._internal_config import get_cppbuild_dir
from c2.test.case_generator import CaseGenerator
from c2.test.case import Case
from c2.test.run_info import RunInfo
from c2.infra.unischema import unischema_load
from c2.common.pe_common import pe_get_export_rva

_sd = os.path.dirname(__file__)


def get_tbdemo_path(tmpdir: str, bitness: int):
  assert (bitness == 32 or bitness == 64)
  return f'{tmpdir}/code_tbdemo_{bitness}.bin'


# *** See paytest.concept.nfo ***

# order is met when running tests
PAYTEST_GENTYPES = ['sc', 'sc_frm',
                    'exe', 'exe_pfn', 'exe_frm', 'exe_pfn_frm', 'dll', 'dll_pfn',
                    'dll_frm', 'dll_pfn_frm']

# A generator that yields instances of PaytestCase.
# Requires make_var.bat to be executed so var/ dir is filled with requried stuff.
# No support now for diagonal jen.
# It's required to commit() PaytestPreparation before running CaseGenerator.
class PaytestCaseGenerator(CaseGenerator):
  def __init__(self, tmp_dir):
    self._tmp_dir = tmp_dir

  def _init_first_iter(self):
    # locate testbin exports
    assert(self._export_rvas == {})
    self._locate_testbin_exports()

    # make default pay_info
    self._def_pay_info = unischema_load(f'{_sd}/../pay_info.UNISCHEMA', f'{_sd}/..').make_default_config()
    # for virlib only:
    self._def_pay_info['export_name'] = 'DllInstall'
    self._def_pay_info['export_decl_args'] = 'BOOL a, PCWSTR b' # we're gonna be DLL for regsvr32, not for rundll32
    self._def_pay_info['export_def_call_args'] = '0, L``'

  def _actual_number_of_gentypes(self) -> int:
    # -1 if exe_pfn_frm is present, because it doesn't yield a case
    actual_num_gentypes = super()._actual_number_of_gentypes()
    if 'exe_pfn_frm' in self._gentypes:
      actual_num_gentypes -= 1
    return actual_num_gentypes

  def _gen_case_with_casetest_opts(self, casetest_opts):
    tbconf = casetest_opts['testbin_configuration']
    tbbitness = casetest_opts['testbin_bitness']
    assert(tbbitness == 32 or tbbitness == 64)

    vsarch = 'Win32' if tbbitness == 32 else 'x64'
    tb_exe = f'{get_cppbuild_dir()}/testbin/{tbconf}/{vsarch}/testbin.exe'
    tb_dll = f'{get_cppbuild_dir()}/testbin/{tbconf}Dll/{vsarch}/testbin.dll'
    pfn_rva = self._export_rvas[vsarch][tbconf]['DllInstall']
    pfn_rva_str = f'0x{pfn_rva:x}'

    def_pay_info = self._def_pay_info
    def_pay_info['cpu'] = 'intel86' if tbbitness == 32 else 'intel64'

    tester_tbb = f'$tester{tbbitness}'
    tbdemo_bin = get_tbdemo_path(self._tmp_dir, tbbitness)

    for gentype in self._gentypes:
      if gentype == 'sc':
        yield Case(gentype, {**def_pay_info, 'bin_type': 'win_shellcode'},
                   tbdemo_bin,  # should be pre-generated by make_var.bat
                   OrderedDict({
                     'virprog': RunInfo([
                       (f'{tester_tbb} sc-in-exe $exe', 0),
                     ]),
                     'virlib': RunInfo([
                       (f'{tester_tbb} sc-in-dll $dll /export', 0),
                     ]),
                   }))
      elif gentype == 'sc_frm':
        yield Case(gentype, {**def_pay_info, 'bin_type': 'win_shellcode', 'dll_evil_from_dllmain': True},
                   tbdemo_bin,
                   OrderedDict({
                     'virprog': RunInfo([
                       #(f'{tester_tbb} sc-in-exe $exe', 0), # <not aff.>
                     ]),
                     'virlib': RunInfo([
                       (f'{tester_tbb} sc-in-dll $dll', 0),
                     ]),
                   }))
      ############################################################################################
      elif gentype == 'exe':
        yield Case(gentype, {**def_pay_info, 'bin_type': 'win_exe'},
                   tb_exe,
                   OrderedDict({
                     'virprog': RunInfo([
                       (f'{tester_tbb} exe-in-exe $exe', 0),
                     ]),
                     'virlib': RunInfo([
                       (f'{tester_tbb} exe-in-dll $dll /export', 10000),
                     ]),
                   }))
      elif gentype == 'exe_pfn':
        # postfn not tested with EXE if we use testbin!
        # postfn doesn't work with testbin.exe, as stated many times; but if it would another binary,
        # whose main() returns without ExitProcess, postfn_rva would get called with postfn_***args !
        yield Case(gentype, {**def_pay_info, 'bin_type': 'win_exe',
                             'postfn_rva': pfn_rva_str,
                             'postfn_decl_args': 'BOOL bInstall, PCWSTR pszCmdLine',
                             'postfn_fromdll_call_args': '(BOOL)1, L`you are called from Dll`',#STRANGE<'>, why not "? how is it compiled?
                             'postfn_fromexe_call_args': '(BOOL)1, lpCmdLine'},
                   tb_exe,
                   OrderedDict({
                     'virprog': RunInfo([
                       (f'{tester_tbb} exe-in-exe $exe', 0), # not aff.
                     ]),
                     'virlib': RunInfo([
                       (f'{tester_tbb} exe-in-dll $dll /export', 10000), # not aff.
                     ]),
                   }))
      elif gentype == 'exe_frm':
        yield Case(gentype, {**def_pay_info, 'bin_type': 'win_exe', 'dll_evil_from_dllmain': True},
                   tb_exe,
                   OrderedDict({
                     'virprog': RunInfo([
                       (f'{tester_tbb} exe-in-exe $exe', 0), # not aff.
                     ]),
                     'virlib': RunInfo([
                       (f'{tester_tbb} exe-in-dll $dll', 10000), # WinMain breaks and ExitProcess(10000)
                     ]),
                   }))
      elif gentype == 'exe_pfn_frm':
        # not affected, same as exe_frm
        #
        # We've taken this case into account by returning 1 from _number_of_excluded_cases().
        #
        pass
      ############################################################################################
      elif gentype == 'dll':
        yield Case(gentype, {**def_pay_info, 'bin_type': 'win_dll'},
                   tb_dll,
                   OrderedDict({
                     'virprog': RunInfo([
                       (f'{tester_tbb} dll-in-exe $exe', 0),
                     ]),
                     'virlib': RunInfo([
                       (f'{tester_tbb} dll-in-dll $dll /export', 0)
                     ]),
                   }))
      elif gentype == 'dll_pfn':
        yield Case(gentype, {**def_pay_info, 'bin_type': 'win_dll',
                             'postfn_rva': pfn_rva_str,
                             'postfn_decl_args': 'BOOL bInstall, PCWSTR pszCmdLine',
                             'postfn_fromdll_call_args': '(BOOL)1, L`you are called from Dll`',
                             'postfn_fromexe_call_args': '(BOOL)1, lpCmdLine'}, # passthrough WinMain's args
                   tb_dll,
                   OrderedDict({
                     'virprog': RunInfo([
                       (f'{tester_tbb} dll-in-exe $exe /postfn', 0), # not aff.
                     ]),
                     'virlib': RunInfo([
                       (f'{tester_tbb} dll-in-dll $dll /export /postfn', 0)
                     ]),
                   }))
      elif gentype == 'dll_frm':
        yield Case(gentype, {**def_pay_info, 'bin_type': 'win_dll', 'dll_evil_from_dllmain': True },
                   tb_dll,
                   OrderedDict({
                     'virprog': RunInfo([
                       (f'{tester_tbb} dll-in-exe $exe', 0), # not aff.
                     ]),
                     'virlib': RunInfo([
                       (f'{tester_tbb} dll-in-dll $dll', 0)
                     ]),
                   }))
      elif gentype == 'dll_pfn_frm': # Both PFN and FRM !
        yield Case(gentype, {**def_pay_info, 'bin_type': 'win_dll',
                             'dll_evil_from_dllmain': True,
                             'postfn_rva': pfn_rva_str,
                             'postfn_decl_args': 'BOOL bInstall, PCWSTR pszCmdLine',
                             'postfn_fromdll_call_args': '(BOOL)1, L`you are called from Dll, both pfn and frm case`',
                             'postfn_fromexe_call_args': '(BOOL)1, lpCmdLine'},
                   tb_dll,
                   OrderedDict({
                     'virprog': RunInfo([
                       (f'{tester_tbb} dll-in-exe $exe /postfn', 0), # not aff.
                     ]),
                     'virlib': RunInfo([
                       (f'{tester_tbb} dll-in-dll $dll /postfn', 0)
                     ]),
                   }))

      else:
        raise RuntimeError(f'unknown gentype - {gentype}, need one from {PAYTEST_GENTYPES}')
    return

  def _locate_testbin_exports(self):
    for vsarch in  ['x64', 'Win32']:
      for cfg in ['Release']:
        testbin_dll = f'{get_cppbuild_dir()}/testbin/{cfg}Dll/{vsarch}/testbin.dll'
        # we now only need DllInstall. If we will need more, we will probably pe_get_exports
        # and search through it manually
        self._export_rvas.setdefault(vsarch, {}).setdefault(cfg, {})['DllInstall'] =\
            pe_get_export_rva(testbin_dll, 'DllInstall')
    return



def _test1():
  casetest_opts = unischema_load(f'{_sd}/casetest_opts.UNISCHEMA', None).make_dynjen_doc()

  casegen = PaytestCaseGenerator(None)
  casegen.set_source_material(casetest_opts, [], []) # none of gentypes
  x = casegen.number_of_cases()
  cases = []
  for case in casegen:
    print(case)
    cases.append(case)

  casegen = PaytestCaseGenerator(None)
  casegen.set_source_material(casetest_opts, [], ['sc']) # some gentypes
  x = casegen.number_of_cases()
  cases = []
  for case in casegen:
    print(case)
    cases.append(case)

  print()



def test_paytest_case_generator(argv):
  _test1()


if __name__ == '__main__':
  test_paytest_case_generator(sys.argv[1:])


